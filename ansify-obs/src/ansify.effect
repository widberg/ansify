uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d lut;
uniform texture2d map;
uniform float2 character_dimensions;
uniform float2 image_dimensions;
uniform float2 image_dimensions_i;
uniform float2 characters;

sampler_state linear_sampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

sampler_state point_sampler {
	Filter   = Point;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertInOut {
	float4 pos : POSITION;
	float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
	VertInOut vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv  = vert_in.uv;
	return vert_out;
}

float4 GetAveragedPixelatedColor(float2 uv)
{
    float d = characters * image_dimensions_i;
    float2 start = d * floor(uv / d);
	float2 dd = image_dimensions / characters;

    float4 accumulation = float4(0.0f, 0.0f, 0.0f, 0.0f);

    for (float x = 0; x < dd.x; x++)
    {
        for (float y = 0; y < dd.y; y++)
        {
            float2 offset = float2(x, y) * image_dimensions_i;
            accumulation += image.Sample(linear_sampler, start + offset);
        }
    }

    accumulation /= dd.x * dd.y;

	return accumulation;
}

float4 PSANSIfy(VertInOut vert_in) : TARGET
{
    return GetAveragedPixelatedColor(vert_in.uv);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader  = PSANSIfy(vert_in);
	}
}
